/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Import } from './routes/*'
import { Route as BookIndexImport } from './routes/book/index'

// Create Virtual Routes

const ReservationsLazyImport = createFileRoute('/reservations')()
const IndexLazyImport = createFileRoute('/')()
const BookPropertyIdLazyImport = createFileRoute('/book/$propertyId')()

// Create/Update Routes

const ReservationsLazyRoute = ReservationsLazyImport.update({
  path: '/reservations',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/reservations.lazy').then((d) => d.Route))

const Route = Import.update({
  path: '/*',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const BookIndexRoute = BookIndexImport.update({
  path: '/book/',
  getParentRoute: () => rootRoute,
} as any)

const BookPropertyIdLazyRoute = BookPropertyIdLazyImport.update({
  path: '/book/$propertyId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/book/$propertyId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/*': {
      id: '/*'
      path: '/*'
      fullPath: '/*'
      preLoaderRoute: typeof Import
      parentRoute: typeof rootRoute
    }
    '/reservations': {
      id: '/reservations'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof ReservationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/$propertyId': {
      id: '/book/$propertyId'
      path: '/book/$propertyId'
      fullPath: '/book/$propertyId'
      preLoaderRoute: typeof BookPropertyIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/': {
      id: '/book/'
      path: '/book'
      fullPath: '/book'
      preLoaderRoute: typeof BookIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  Route,
  ReservationsLazyRoute,
  BookPropertyIdLazyRoute,
  BookIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/*",
        "/reservations",
        "/book/$propertyId",
        "/book/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/*": {
      "filePath": "*.tsx"
    },
    "/reservations": {
      "filePath": "reservations.lazy.tsx"
    },
    "/book/$propertyId": {
      "filePath": "book/$propertyId.lazy.tsx"
    },
    "/book/": {
      "filePath": "book/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
